        steps:
          - checkout: self
            persistCredentials: true
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '.'
          - script: |
                     echo 'Creating docker image'
                     ls drop/
                     mv drop ./ci-helper/docker
                     mv ./ci-helper/infra/nginx/nginx.conf ./ci-helper/docker
                     ls ./ci-helper/docker
            name: RearrangeFiles
          - bash: |
                  mkdir -p $(Pipeline.Workspace)/variables
                  echo "$(releaseName)-v$(major).$(minor).$(patch)" > $(Pipeline.Workspace)/variables/version
                  version= "$(releaseName)-v$(major).$(minor).$(patch)"
                  echo "##vso[task.setvariable variable=version]$version"
                  echo "##vso[build.addbuildtag]$(releaseName)"
            name: SetMasterBuildName


          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              containerRegistry: 'kubeappdrupal'
              repository: '$(acrRepositoryName)'
              command: 'build'
              Dockerfile: '$(Agent.BuildDirectory)/s/ci-helper/docker/DockerFile'
              buildContext: '$(Agent.BuildDirectory)/s/ci-helper/docker'
              tags: '$(version)'
              arguments: '--build-arg build_no=$(version)'

          - task: Docker@2
            displayName: Push an image to container registry
            inputs:
              containerRegistry: 'kubeappdrupal'
              repository: '$(acrRepositoryName)'
              command: 'push'
              tags: '$(version)'

          - bash: |
                  git status
                  git tag '$(version)'
                  git push origin '$(version)'
            name: PushTag

          - publish: $(Pipeline.Workspace)/variables
            artifact: variables

          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Agent.BuildDirectory)/s/ci-helper/infra/helm-cms'
              Contents: '**'
              TargetFolder: '$(build.artifactstagingdirectory)'
              Overwrite: true
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(build.artifactstagingdirectory)'
              ArtifactName: chart